apiVersion: kubeadm.k8s.io/v1beta2
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: abcdef.0123456789abcdef
  ttl: 2h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: {{ ansible_default_ipv4.address }}
  bindPort: {{ kube_port_tcp_arg.api }}
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  imagePullPolicy: IfNotPresent
  name: {{ ansible_fqdn }}
  taints: null
---
apiServer:
  timeoutForControlPlane: 10m0s
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
controllerManager:
  extraArgs:
    address: 0.0.0.0
    bind-address: 0.0.0.0
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
    extraArgs:
      listen-metrics-urls: http://0.0.0.0:2381
imageRepository: {{ kube_registry_mirrors['google'] }}/google_containers
kind: ClusterConfiguration
kubernetesVersion: v{{ kube_version }}
controlPlaneEndpoint: "{% if kube_control_plane_endpoint is defined %}{{ kube_control_plane_endpoint | lower }}:{{ kube_control_plane_port | default('6443') }}{% else %}{{ ansible_default_ipv4.address }}:{{ kube_port_tcp_arg.api }}{% endif %}"
networking:
  dnsDomain: cluster.local
  podSubnet: "{{ kube_pod_cidr }}"
  serviceSubnet: "{{ kube_srv_cidr }}"
scheduler:
  extraArgs:
    address: 0.0.0.0
    bind-address: 0.0.0.0
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
mode: {% if kube_proxy_ipvs | bool | default(false) %}ipvs{% endif %}
