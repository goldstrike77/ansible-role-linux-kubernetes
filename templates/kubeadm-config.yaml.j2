apiVersion: kubeadm.k8s.io/v1beta3
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: abcdef.0123456789abcdef
  ttl: 2h0m0s
  usages:
  - signing
  - authentication
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: {{ ansible_default_ipv4.address }}
  bindPort: {{ kube_port_tcp_arg.api }}
nodeRegistration:
  criSocket: unix:///run/containerd/containerd.sock
  imagePullPolicy: IfNotPresent
  name: {{ ansible_fqdn }}
  taints: null
---
apiServer:
  timeoutForControlPlane: 10m0s
  extraArgs:
    v: "2"
    logtostderr: "false"
    log-dir: "{{ kube_cri.path }}/log/kubernetes"
    audit-log-maxage: "20"
    audit-log-maxbackup: "10"
    audit-log-maxsize: "100"
    audit-log-path: "{{ kube_cri.path }}/log/kube-audit/audit.log"
    audit-policy-file: "/etc/kubernetes/audit-policy.yaml"
    authorization-mode: "Node,RBAC"
    event-ttl: "720h"
    runtime-config: "api/all=true"
    service-node-port-range: "{{ kube_port_tcp_arg.node | default('30000-32767') }}"
    service-cluster-ip-range: "{{ kube_cni.srv_cidr | default('kube_cni.srv_cidr') }}"
  extraVolumes:
  - name: "k8s-log"
    hostPath: "{{ kube_cri.path }}/log/kubernetes"
    mountPath: "{{ kube_cri.path }}/log/kubernetes"
    pathType: "DirectoryOrCreate"
  - name: "audit-config"
    hostPath: "/etc/kubernetes/audit-policy.yaml"
    mountPath: "/etc/kubernetes/audit-policy.yaml"
    readOnly: true
    pathType: "File"
  - name: "audit-log"
    hostPath: "{{ kube_cri.path }}/log/kube-audit"
    mountPath: "{{ kube_cri.path }}/log/kube-audit"
    pathType: "DirectoryOrCreate" 
apiVersion: kubeadm.k8s.io/v1beta2
certificatesDir: /etc/kubernetes/pki
clusterName: {{ kube_clustername | default("kubernetes") }}
controllerManager:
  extraArgs:
    address: 0.0.0.0
    bind-address: 0.0.0.0
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
    extraArgs:
      listen-metrics-urls: http://0.0.0.0:2381
      quota-backend-bytes: "8589934592"
imageRepository: {{ kube_registry_mirrors['google'] }}/google_containers
kind: ClusterConfiguration
kubernetesVersion: v{{ kube_version }}
controlPlaneEndpoint: "{% if kube_control_plane_endpoint is defined %}{{ kube_control_plane_endpoint | lower }}:{{ kube_control_plane_port | default('6443') }}{% else %}{{ ansible_default_ipv4.address }}:{{ kube_port_tcp_arg.api }}{% endif %}"
networking:
  dnsDomain: cluster.local
  podSubnet: "{{ kube_cni.pod_cidr }}"
  serviceSubnet: "{{ kube_cni.srv_cidr }}"
scheduler:
  extraArgs:
    address: 0.0.0.0
    bind-address: 0.0.0.0
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
metricsBindAddress: 0.0.0.0
{% if kube_proxy_ipvs | bool | default(false) %}
mode: ipvs
ipvs:
  strictARP: {{ kube_strictarp | bool | default(false) | to_json }}
{% endif %}
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
allowedUnsafeSysctls: ["{{ kube_kubelet.unsafesysctls | list | join('","') }}"]
cgroupDriver: systemd
cgroupsPerQOS: true
clusterDomain: "{{ kube_kubelet.clusterdomain }}"
containerLogMaxFiles: {{ kube_kubelet.logmaxfiles }}
containerLogMaxSize: "{{ kube_kubelet.logmaxsize }}"
failSwapOn: false
kubeAPIBurst: {{ kube_kubelet.kubeapiburst }}
kubeAPIQPS: {{ kube_kubelet.kubeapiqps }}
kubeletCgroups: "/systemd/system.slice"
kubeReservedCgroup: "/systemd/system.slice"
maxPods: {{ kube_kubelet.maxpods }}
rotateCertificates: true
serializeImagePulls: {{ kube_kubelet.serializeimagepulls | bool | to_json }}
systemReservedCgroup: "/systemd/system.slice"