---
- name: Check local consul client are accessible from current host.
  uri:
    url: '{{ consul_public_http_prot }}://{{ ansible_default_ipv4.address }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'GET'
    timeout: '5'
    validate_certs: 'no'
  environment:
    no_proxy: '{{ ansible_default_ipv4.address }}'
  changed_when: false
  failed_when: false
  register: check_consul_local

- name: Register service with an http health check.
  uri:
    url: '{{ consul_public_http_prot }}://{{ ansible_default_ipv4.address }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"tags":["kubernetes"],"ID":"{{ customer | lower | regex_replace("_", "-") }}-{{ environments | lower | regex_replace("_", "-") }}-{{ group_names[-1] | lower | regex_replace("_", "-") }}-{{ group_names[0] | lower | regex_replace("_", "-") }}-k8s","name":"{{ customer | lower | regex_replace("_", "-") }}-{{ environments | lower | regex_replace("_", "-") }}-{{ group_names[-1] | lower | regex_replace("_", "-") }}-{{ group_names[0] | lower | regex_replace("_", "-") }}-k8s","address":"{{ ansible_default_ipv4.address }}","port":{{ kube_port_tcp_arg.api }},"checks":[{"tcp":"{{ ansible_default_ipv4.address }}:{{ kube_port_tcp_arg.api }}","interval":"10s","timeout":"10s"}]}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
    validate_certs: 'no'
  environment:
    no_proxy: '{{ ansible_default_ipv4.address }}'
  when: check_consul_local.status == 405
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 3
  no_log: true
  changed_when: false
  failed_when: false

- name: Kubeadm configuration file transfer.
  template:
    src: 'kubeadm-config.yaml.j2'
    dest: '/tmp/kubeadm-config.yaml'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Initialize Kubernetes master.
  command: >
    kubeadm init
    --config=/tmp/kubeadm-config.yaml
    --{% if kube_version.split('.')[0] == '1' and kube_version.split('.')[1] == '14' %}experimental-upload-certs{% else %}upload-certs{% endif %}
    --ignore-preflight-errors=all
  environment:
    no_proxy: '*'
  notify: 'Kubernetes control plane node labele applied'

- name: Remove the kubeadm configuration file.
  file:
    path: '/tmp/kubeadm-config.yaml'
    state: 'absent'
  when: kube_template_clean | bool

- name: Watch ServiceAccount file transfer.
  copy:
    src: 'grafana-prometheus-scraper.yaml'
    dest: '/tmp/grafana-prometheus-scraper.yaml'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Apply the Watch ServiceAccount manifest.
  command: 'kubectl apply -f /tmp/grafana-prometheus-scraper.yaml'
  environment:
    no_proxy: '*'
    KUBECONFIG: '/etc/kubernetes/admin.conf'

- name: Get watch ServiceAccount access token.
  shell: "kubectl -n default describe secret $(kubectl -n default get secret | grep grafana-prometheus-scraper | awk '{print $1}') | grep 'token:' | sed 's/.*://' | sed 's/^[ \t]*//g'"
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
    no_proxy: '*'
  no_log: true
  register: kube_prometheus_token

- name: Prometheus access token outputs.
  copy:
    content: '{{ kube_prometheus_token.stdout_lines[0] }}'
    dest: '/tmp/prometheus.token'
    owner: 'root'
    group: 'root'
    mode: '0600'
  no_log: true

- name: Remove the Watch ServiceAccount configuration file.
  file:
    path: '/tmp/grafana-prometheus-scraper.yaml'
    state: 'absent'
  when: kube_template_clean | bool

- name: Kubelet certificates autoapprove manifest file transfer.
  copy:
    src: 'kubelet_cert_update.yaml'
    dest: '/tmp/kubelet_cert_update.yaml'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: Apply the Kubelet certificates autoapprove.
  command: 'kubectl apply -f /tmp/kubelet_cert_update.yaml'
  environment:
    no_proxy: '*'
    KUBECONFIG: '/etc/kubernetes/admin.conf'

- name: Remove the Kubelet certificates autoapprove manifest file.
  file:
    path: '/tmp/kubelet_cert_update.yaml'
    state: 'absent'
  when: kube_template_clean | bool

- name: Kube controller manager extra args configuration.
  lineinfile:
    state: 'present'
    dest: '/etc/kubernetes/manifests/kube-controller-manager.yaml'
    insertafter: '    - kube-controller-manager'
    regexp: '    - --{{ item }}'
    line: '    - --{{ item }}'
  loop: '{{ kube_controller_manager_extra_args }}'

- name: Sleep for 10 seconds for wait kube controller manager reload.
  wait_for:
    timeout: 10
  delegate_to: 'localhost'
