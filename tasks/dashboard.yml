---
- name: Create Kubernetes dashboard folder.
  file:
    path: '/tmp/dashboard'
    state: 'directory'

- name: Kubernetes dashboard manifest file transfer.
  template:
    src: 'dashboard/{{ item | basename }}'
    dest: '/tmp/dashboard/{{ item | basename }}'
    owner: 'root'
    group: 'root'
    mode: '0644'
  loop: "{{ lookup('fileglob', '../templates/dashboard/*.yaml', wantlist=True) }}"

- name: Enable the Kubernetes Web Dashboard.
  command: 'kubectl create -f "/tmp/dashboard"'
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
    no_proxy: '*'

- name: Get Dashboard access token.
  shell: "kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep kubernetes-dashboard-admin | awk '{print $1}') | grep 'token:' | sed 's/.*://' | sed 's/^[ \t]*//g'"
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
    no_proxy: '*'
  no_log: true
  register: kube_dashboard_token

- name: Dashboard access token outputs.
  copy:
    content: '{{ kube_dashboard_token.stdout_lines[0] }}'
    dest: '/tmp/dashboard.token'
    mode: '0600'
    owner: 'root'
    group: 'root'
  no_log: true

- name: Remove the kubernetes dashboard configuration.
  file:
    path: '/tmp/dashboard'
    state: 'absent'
  when: kube_template_clean | bool

- name: Get kubernetes dashboard node port.
  shell: "kubectl describe service kubernetes-dashboard -n kubernetes-dashboard | grep NodePort | grep TCP | awk '{print $3}' | cut -d / -f 1"
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
    no_proxy: '*'
  no_log: true
  register: kubernetes_dashboard_nodeport
  until: kubernetes_dashboard_nodeport is succeeded
  retries: 3
  delay: 3
  changed_when: false
  failed_when: false

- name: Check register client are accessible from current host.
  uri:
    url: '{{ consul_public_http_prot }}://{{ item }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'GET'
    timeout: '5'
    validate_certs: 'no'
  environment:
    no_proxy: '{{ item }}'
  loop: '{{ consul_public_clients }}'
  changed_when: false
  failed_when: false
  register: check_consul_reg

- name: Register exporter service with an http health check.
  uri:
    url: '{{ consul_public_http_prot }}://{{ item.client }}:{{ consul_public_http_port }}/v1/agent/service/register'
    method: 'PUT'
    body: '{"tags":["prometheus","exporter","prober"],"ID":"{{ customer | lower | regex_replace("_", "-") }}-{{ environments | lower | regex_replace("_", "-") }}-{{ group_names[-1] | lower | regex_replace("_", "-") }}-{{ group_names[0] | lower | regex_replace("_", "-") }}-k8s-dashboard","name":"blackbox_exporter_prober","meta":{"project":"{{ group_names[-1] | title | regex_replace("_", "-") }}","customer":"{{ customer | title | regex_replace("_", "-") }}","group":"{{ group_names[0] | title | regex_replace("_", "-") }}","target":"https://{% if kube_control_plane_endpoint is defined %}{{ kube_control_plane_endpoint | lower }}{% else %}{{ ansible_default_ipv4.address }}{% endif %}:{{ kubernetes_dashboard_nodeport.stdout }}","datacenter":"{{ datacenter | lower }}","domain":"{{ domain | lower }}","environment":"{{ environments | lower }}"{% if tags is defined %},{{ tags | to_json | regex_replace("{") | regex_replace("}") }}{% endif %},"module":"http_2xx","metrics_path":"/probe","address":":9115",}}'
    body_format: 'json'
    status_code: '200'
    headers:
      X-Consul-Token: '{{ consul_public_exporter_token }}'
      X-Requested-By: '{{ ansible_default_ipv4.address }}'
      cache-control: 'no-cache'
    validate_certs: 'no'
  environment:
    no_proxy: '{{ item.client }}'
  loop: "{{ check_consul_reg.results | json_query('[*].{client:item,status:status}') }}"
  when: item.status == 405
  register: register_status
  until: register_status.status == 200
  retries: 3
  delay: 3
  no_log: true
  changed_when: false
  failed_when: false
